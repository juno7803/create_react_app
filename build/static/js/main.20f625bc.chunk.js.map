{"version":3,"sources":["components/TOC.js","components/Content.js","components/Subject.js","App.js","serviceWorker.js","index.js"],"names":["TOC","console","log","lists","data","this","props","i","legnth","push","key","id","href","title","Component","Content","desc","Subject","sub","App","state","mode","subject","welcome","contents","_title","_desc","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAyBiBA,E,iLArBXC,QAAQC,IAAI,cAIZ,IAHA,IAAIC,EAAQ,GACRC,EAAOC,KAAKC,MAAMF,KAClBG,EAAI,EACFA,EAAEH,EAAKI,QAEXL,EAAMM,KAAK,wBAAIC,IAAKN,EAAKG,GAAGI,IAAI,uBAAGC,KAAM,YAAYR,EAAKG,GAAGI,IAAKP,EAAKG,GAAGM,SAC1EN,GAAM,EAER,OACE,6BACE,4BACE,4BAAI,uBAAGK,KAAK,UAAR,SACJ,4BAAI,uBAAGA,KAAK,SAAR,QACJ,4BAAI,uBAAGA,KAAK,gBAAR,qB,GAhBEE,aCYDC,E,iLATX,OADAd,QAAQC,IAAI,kBAEV,iCACE,4BAAKG,KAAKC,MAAMO,OACfR,KAAKC,MAAMU,U,GANAF,aCcLG,E,iLAXX,OADAhB,QAAQC,IAAI,kBAEV,gCACE,4BAAI,uBAAGU,KAAK,YAAYP,KAAKC,MAAMO,QAClCR,KAAKC,MAAMY,S,GANAJ,aC+CPK,G,wBAxCb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KACDc,MAAQ,CACXC,KAAK,UACLC,QAAQ,CAACT,MAAM,MAAOK,IAAI,mBAC1BK,QAAQ,CAACV,MAAM,UAAWG,KAAK,kBAC/BQ,SAAS,CACP,CAACb,GAAG,EAAGE,MAAM,OAAQG,KAAK,qBAC1B,CAACL,GAAG,EAAGE,MAAM,MAAOG,KAAK,qBACzB,CAACL,GAAG,EAAGE,MAAM,aAAcG,KAAK,mCATpB,E,sEAchBf,QAAQC,IAAI,cACZ,IAAIuB,EAAQC,EAAQ,KAYpB,MAXuB,YAApBrB,KAAKe,MAAMC,MAEZI,EAASpB,KAAKe,MAAMG,QAAQV,MAC5Ba,EAAQrB,KAAKe,MAAMG,QAAQP,MAGD,SAApBX,KAAKe,MAAMC,OAEjBI,EAASpB,KAAKe,MAAMI,SAAS,GAAGX,MAChCa,EAAQrB,KAAKe,MAAMI,SAAS,GAAGR,MAG/B,yBAAKW,UAAU,OACb,kBAAC,EAAD,CACEd,MAAOR,KAAKe,MAAME,QAAQT,MAC1BK,IAAKb,KAAKe,MAAME,QAAQJ,MAE1B,kBAAC,EAAD,CAAKd,KAAMC,KAAKe,MAAMI,WACtB,kBAAC,EAAD,CAASX,MAAQY,EAAQT,KAAOU,S,GAnCtBZ,cCIEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20f625bc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n//\"React\" 라는 라이브러리에서 \"Component\"라는 클래스를 로딩한 것\r\nclass TOC extends Component {\r\n    render(){\r\n      console.log('TOC render');\r\n      var lists = [];\r\n      var data = this.props.data;\r\n      var i = 0;\r\n      while(i<data.legnth)\r\n      {\r\n        lists.push(<li key={data[i].id}><a href={\"/content/\"+data[i].id}>{data[i].title}</a></li>);\r\n        i = i+1;\r\n      }\r\n      return(\r\n        <nav> \r\n          <ul>\r\n            <li><a href=\"1.html\">HTML</a></li>\r\n            <li><a href=\"2.CSS\">CSS</a></li>\r\n            <li><a href=\"3.JavaScript\">JavaScript</a></li>\r\n          </ul>\r\n        </nav>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default TOC;\r\n  // 이 코드를 씀 으로서 다른곳에서도 TOC라는 클래스를 가져다 사용 할 수 있게 된다!","import React, {Component} from 'react';\r\n\r\nclass Content extends Component{\r\n    render(){\r\n      console.log('Content render');\r\n      return(\r\n        <article>\r\n          <h2>{this.props.title}</h2>\r\n          {this.props.desc}\r\n        </article>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Content;","import React, {Component} from 'react';\r\n\r\nclass Subject extends Component {\r\n    render(){ // class 안엔 fucntion을 앞에 붙일 필요가 없다!\r\n      console.log('Subject render');\r\n      return (\r\n        <header> \r\n          <h1><a href=\"/content\">{this.props.title}</a></h1>\r\n          {this.props.sub}\r\n        </header>\r\n        // props 는 속성을 부여해줄 수 있다! 뒤에 오는 sub title 등은 사용자가 임의 정의하는것!\r\n        //(주의할 것) header, div 등 딱 하나의 최상위 태그만 써야 한다!\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Subject;","import React, {Component} from 'react';\nimport TOC from \"./components/TOC\";\nimport Content from \"./components/Content\";\nimport Subject from \"./components/Subject\";\nimport './App.css'; // 여기는 파일명이 들어가야 함!\nimport { thisExpression } from '@babel/types';\n\n// Component라는 리액트가 갖고 있는 class를 상속하고 있는 App(사용자 정의)\nclass App extends Component { \n  constructor(props){\n    super(props);\n    this.state = {\n      mode:'welcome',// mode:'read'\n      subject:{title:'WEB', sub:'World Wide Web!'},\n      welcome:{title:'Welcome', desc:'Hello, React!!'},\n      contents:[\n        {id:1, title:'HTML', desc:'Html is HyperText'},\n        {id:2, title:'CSS', desc:'CSS is for design'},\n        {id:3, title:'JavaScript', desc:'JavaScript is for interactive'}\n      ] // 대괄호 : 배열\n    }\n  } // render 보다 먼저 실행이 되면서 Component를 초기화 시켜 주려는 코드를 constructor안에 쓴다!(초기화를 담당한다!)\n  render(){\n    console.log('App render');\n    var _title, _desc = null;\n    if(this.state.mode === 'welcome')\n    {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n\n    }\n    else if(this.state.mode === 'read')\n    {\n      _title = this.state.contents[0].title;\n      _desc = this.state.contents[0].desc;\n    }\n    return(\n      <div className=\"App\">\n        <Subject \n          title={this.state.subject.title} // 앞의 title은 props로 지정한 것, 뒤의 title1은 state에서 지정한 것\n          sub={this.state.subject.sub}>\n        </Subject>\n        <TOC data={this.state.contents}></TOC>\n        <Content title ={_title} desc ={_desc}></Content>\n      </div>\n    ); // 개발자도구를 돌려보면, \"Subject\" 라는 사용자정의 태그는 없음. 즉 \"함수\" 느낌? 으로 사용자가 react를 이용하여 편하게 정의한 것이고 이는 다시 react가 원래의 코드를 보내준다!\n  }\n}\n// 이 전체를 Component를 만드는 \"Template 이라고 생각하면 됨!\"\nexport default App;\n\n//Component를 \"정리정돈의 도구\" 라고 생각하자! -> 복잡도를 낮춤!","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// entry : 진입 파일\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // 여기는 파일명이 들어가야 함!(사실은 App.js)\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// 초록글씨 App Component를 실행한다! / App.js에 적용시키겠다! 라는 뜻.)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}